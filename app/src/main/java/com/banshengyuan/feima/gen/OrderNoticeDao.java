package com.banshengyuan.feima.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.banshengyuan.feima.database.OrderNotice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_NOTICE".
*/
public class OrderNoticeDao extends AbstractDao<OrderNotice, Long> {

    public static final String TABLENAME = "ORDER_NOTICE";

    /**
     * Properties of entity OrderNotice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "orderId", false, "orderId");
        public final static Property OrderTime = new Property(2, java.util.Date.class, "orderTime", false, "orderTime");
        public final static Property OrderFlag = new Property(3, Integer.class, "orderFlag", false, "orderFlag");
        public final static Property OrderChannel = new Property(4, String.class, "orderChannel", false, "orderChanel");
    }


    public OrderNoticeDao(DaoConfig config) {
        super(config);
    }
    
    public OrderNoticeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_NOTICE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"orderId\" TEXT," + // 1: orderId
                "\"orderTime\" INTEGER," + // 2: orderTime
                "\"orderFlag\" INTEGER," + // 3: orderFlag
                "\"orderChanel\" TEXT);"); // 4: orderChannel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_NOTICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        java.util.Date orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindLong(3, orderTime.getTime());
        }
 
        Integer orderFlag = entity.getOrderFlag();
        if (orderFlag != null) {
            stmt.bindLong(4, orderFlag);
        }
 
        String orderChannel = entity.getOrderChannel();
        if (orderChannel != null) {
            stmt.bindString(5, orderChannel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderNotice entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(2, orderId);
        }
 
        java.util.Date orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindLong(3, orderTime.getTime());
        }
 
        Integer orderFlag = entity.getOrderFlag();
        if (orderFlag != null) {
            stmt.bindLong(4, orderFlag);
        }
 
        String orderChannel = entity.getOrderChannel();
        if (orderChannel != null) {
            stmt.bindString(5, orderChannel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderNotice readEntity(Cursor cursor, int offset) {
        OrderNotice entity = new OrderNotice( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderId
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // orderTime
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderFlag
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // orderChannel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderNotice entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setOrderFlag(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderChannel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderNotice entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderNotice entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderNotice entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
